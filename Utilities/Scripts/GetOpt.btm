@echo off
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: GetOpt - Process command line options                                  Michael Fross
::                                                                    michael@fross.org
::                                                                     http://fross.org
::
:: Latest version can always be found at:  https://bitbucket.org/frossm/getopt.btm
::
:: This program scans the command line sent to it and sets various environment
:: variables that coorespond to the settings.
::
:: In your batch file, call getopt at the top of your program.
::		call GetOpt.btm %$
::
:: The %$ sends the command line to this program function.  Use full path if needed.
::
:: For command line OPTIONS:
:: GetOpt sets an OPTION_arg variable for each arg on the command line.
:: If it's a switch, the env var is set to 1.  If a value is given via the colon sign,
:: it's set to that value.  Note, there can not be any white space around the ':'
:: Also, only the "/" and "-" characters are recoginized as valid option prefixes.
::
:: For example, if you specify /a /b:squiggle   on the command line, then the following 
:: environment variables will be set:
::     Option_a will be set to 1
::     Option_b will be set to squiggle
::
:: To test for a specific option in your program, use "if defined OPTION_arg" or 
:: "if %OPTION_arg eq value" 
::
:: For example: getopt.btm -v filename
::   if defined OPTION_v echo Verbose is set
:: 
:: For command line PARAMETERS:
:: Getopt also sets a parameter variable for each paramater entered: PARAM_1 to PARAM_n
:: PARAM_0 is a special value that contains the number of PARAMs.  Useful for looping
:: through all of them.  For example, do i = 1 to %PARAM_0 by 1 ...
::
:: I also recommend setting setlocal and endlocal in the host batch file so that
:: the option / param variable do not stick around after the host batch files exits.
::
:: I think a larger example will explain things better:
::
:: Example usage:  
::  BatchFile.btm /v /port:171 Filename1.csv -LongOpt OutputFileName /x:"Hello There!"
::   %OPTION_v will equal 1
::   %OPTION_port will equal 171
::   %PARAM_1 will equal Filename1.csv
::   %OPTION_LongOpt will equal 1
::   %PARAM_2 will equal OutputFileName
::   %OPTION_x will equal "Hello There!"
::   %PARAM_0 will be set to the number of parms, so 2 in this case
::
:: If this is all a bit confusing, there is a robust DEBUG mode.  Set the environment
:: variable DEBUG=1 to see a nice display of what's happening.  You can substitude
:: the actual getopt.btm for "BatchFile.btm" above and directly see the results.
::
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

:: Clean up the environment before we get going
unset getopt* OPTION_* PARAM_*
set getopt_ParmCounter=1

:: If in debug mode, kick off the display by showing the number of arguments
iff defined DEBUG then
	echo ---GetOpt Debug Messages Follow ----------------------------------------------
	echo.
	echo Working with command line:
	echo   %$
	echo.
	echo GetOpt is processing %# arguments:
endiff

:: Loop through all command line arguments one at a time.
do i = 1 to %#
	if defined DEBUG (echo. %+ echo Scan #%i:)

	:: If first character starts with a - or / it must be an option
	iff %@instr[0,1,%[%i]] == - .or. %@instr[0,1,%[%i]] == / then
		set getopt_Parm=%[%i]
		if defined DEBUG echo  - Item "%getopt_Parm" is an option.

		:: Set the Colon Index to the position of the colon.  0 means none was found
		set getopt_ColonIdx=%@index[%getopt_Parm,:]

		:: Display the index position of the colon
		iff defined DEBUG .AND. %getopt_ColonIdx GE 0 then
			echo  - Found colon at index position: %getopt_ColonIdx
		endiff

		:: If the index is GE 0 then we must have a colon in the option.
		:: set the OPTION value to the stuff to the right of the colon
		iff %getopt_ColonIdx ge 0 then
			set getopt_ParmName=%@instr[2, %@Dec[%getopt_ColonIdx] , %getopt_Parm]
			if defined DEBUG echo  - ParmName  = "%getopt_ParmName"
			set getopt_ParmValue=%@right[%@eval[-%getopt_ColonIdx-1],%getopt_Parm]
			if defined DEBUG echo  - Parmvalue = "%getopt_ParmValue"
			set OPTION_%getopt_ParmName=%getopt_ParmValue
		else
			:: This is a flag, so simply set the value to 1
			if defined DEBUG echo  - No colon found in "%getopt_Parm"
			set getopt_ParmName=%@right[%@Dec[%@len[%getopt_Parm]],%getopt_Parm]
			set getopt_ParmValue=1
			if defined DEBUG echo  - ParmName = "%getopt_ParmName"
			set OPTION_%getopt_ParmName=%getopt_ParmValue
		endiff

		:: Regardless if there was a value or not, display what is going to occur
		if defined DEBUG echo  - Setting Variable OPTION_%getopt_ParmName=%getopt_ParmValue
	else
		:: There was no / or - found, therefore this must be a paramater, not an option
		if defined DEBUG echo  - "%[%i]" is a parameter, not an option
		set PARAM_%getopt_ParmCounter=%[%i]
		set PARAM_0=%getopt_ParmCounter
		if defined DEBUG echo  - Updating Number of Parms.  PARAM_0=%PARAM_0
		if defined DEBUG echo  - Setting Variable PARAM_%getopt_ParmCounter = %[%i]
		set getopt_ParmCounter=%@Inc[%getopt_ParmCounter]
	endiff
enddo

:: Perform cleanup
unset getopt_* 

:: Display summary information
iff defined DEBUG then
	echo.
	echo There were %PARAM_0 parameters found.  Setting PARAM_0=%PARAM_0
	echo.
	echo GetOpt has completed processing %# arguments.  Ending Execution.
	echo ---End GetOpt Debug Messages -------------------------------------------------
endiff